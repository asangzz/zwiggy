openapi: 3.0.0
info:
  title: Zwiggy API Documentation
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 1.0 
  

servers:
  - url: http://localhost:4000/
    description:  Local server 
  - url: https://prod.com/
    description:  Pre Production server
  - url: https://test.com/
    description:  Production server
  

 
components:
  securitySchemes:
    ApiTokenss:        # arbitrary name for the security scheme
          
      type: http
      scheme: bearer
    
    ApiKey:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: apikey
      
paths:

  /api/users: 
    get:
      tags:
          - Users
      summary: to get all food category 
      responses: 
        '200':
          description: OK

  /api/createUser: 
    post:
      tags:
          - Users
      summary: to create user 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                location:
                  type: string
      responses: 
        '200':
          description: OK
    
  /api/verifyUser: 
    post:
      tags:
          - Users
      summary: to login user 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses: 
        '200':
          description: OK
    

    


  /api/restaurantusers: 
    get:
      tags:
          - Resturant Orders
      summary: Returns all restaurant users.
      parameters:
        - name: userId
          in: path
          required: true
          description: Parameter description in CommonMark or HTML.
          schema:
            # type : integer
            # format: int64
            type: string
            example: "Users String"
            minimum: 1
      responses: 
        '200':
          description: OK
  
  /api/restaurantusersId: 
    post:
      tags:
          - Resturant Orders
      summary: Returns a user details by ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses: 
        '200':
          description: OK


  /api/fooditem:
    post:
      tags:
        - Food Item  
      summary: Returns a user list. 
      description: <b> Request :- </b> <br /> <br />
              <b> page_no* </b>  is required <br /> 
              <b> status* </b>  is required <br /> 
              <b> type* </b>  is required <br /> 

      parameters:
        - in: query
          name: month_year
          schema:
            #type: integer
            example: 2022-10        
      post:
      requestBody:
        required: true
        content:
          multipart/form-data:
           #application/json:
            schema:
              type: object
              properties: 
                page_no:         
                  type: integer
                  example: 1  
                type:       
                  type: string
                  example: "A" 
                status:
                  type: integer
                  example: 0
                fileName:
                  type: string 
                  format: binary
         
      responses:
        '200':
          description: A user object. 
        '400':
          description: The specified user ID is invalid (not a number).
        '404':
          description: A user with the specified ID was not found.
        default:
          description: Unexpected error

  /api/createcategory: 
    post:
      tags:
          - Categories
      summary: to create category 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CategoryName:
                  type: string
      responses: 
        '200':
          description: OK
    
  /api/foodCategory: 
    get:
      tags:
          - Categories
      summary: to get all food category 
      responses: 
        '200':
          description: OK
    